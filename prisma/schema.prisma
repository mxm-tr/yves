generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource postgresDB {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  coins         Int       @default(0)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  bookedAppointments    Appointment[]
  bookedAppointmentsIds String[]
  schedules             Schedule[]
  followers             FollowingLinks[] @relation("Followers")
  followed              FollowingLinks[] @relation("Followed")

  accounts       Account[]
  sessions       Session[]
  Authenticators Authenticator[]

  @@map(name: "users")
}

model Schedule {
  id           String        @id @default(cuid())
  date         DateTime
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String
  appointments Appointment[]
  cost         Int           @default(0)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "schedules")
}

model Appointment {
  id String @id @default(cuid())

  // Who made the appointment
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // On what schedule
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String

  // Has it been confirmed by the owner of the schedule
  confirmed Boolean

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "appointments")
}

model FollowingLinks {
  id String @id @default(cuid())

  // Who is following
  follower   User   @relation("Followers", fields: [followerId], references: [id])
  followerId String

  // Who is being followed
  followed   User   @relation("Followed", fields: [followedId], references: [id])
  followedId String

  // Has it been accepted by the followed
  confirmed Boolean

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "followingLinks")
}
